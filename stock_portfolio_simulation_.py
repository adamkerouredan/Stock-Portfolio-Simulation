# -*- coding: utf-8 -*-
"""Stock Portfolio Simulation.

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Y0mm713nZFRQUNAtIy4hoK2I5PMc4VDW

***Code en python qui va venir simuler un portefeuille d'action avec la m√©thode de monte carlo***
"""

!pip install --upgrade yfinance pandas_datareader

!pip install binance

import pandas as pd # Gestion et analyse des donn√©es sous forme de DataFrame

import numpy as np # Calcul num√©rique et manipulation de tableaux.

import matplotlib.pyplot as plt # Visualisation de donn√©es.

import datetime as dt # Gestion des dates et des heures.

import yfinance as yf # biblioth√®que Python qui permet de r√©cup√©rer des donn√©es financi√®res (actions, indices, devises, crypto, etc.)

from pandas_datareader import data as pdr # R√©cup√©ration des donn√©es financi√®res depuis des sources en ligne.

"""importation de la data"""

def get_data(stocks,start_date,end_date):

  stock_data = yf.download(stocks,start_date,end_date) # t√©l√©charge les donn√©es boursi√®res des actions sp√©cifi√©es

  stock_data = stock_data['Close'] # les prix de cl√¥ture des actions

  returns = stock_data.pct_change() # rendement journalier de chaque action en utilisant la variation en pourcentage

  mean_returns = returns.mean() # moyenne des rendements journaliers pour chaque action

  cov_matrix = returns.cov() # matrice de covariance des rendements entre les actions.

  return mean_returns , cov_matrix

"""verification fonction :"""

stocks_list = ["AAPL", "GOOGL", "MSFT",'MCD', 'TTE', 'MC.PA']  # Liste des actions  ["AAPL", "GOOGL", "MSFT",'MCD', 'TTE', 'MC.PA']

#stocks = [ stock + '.ticker autre apys' for stock in stocks_list] si on veut ajouter des action plus specifique exemple australie

end_date =dt.datetime.now()

start_date = end_date - dt.timedelta(days=300)

mean_returns , cov_matrix =get_data(stocks_list,start_date,end_date)

print(mean_returns,cov_matrix)

"""Ca fonctionne"""

weights = np.random.random(len(mean_returns))  # G√©n√®re des poids al√©atoires pour chaque actif pour un portefeuille diversifi√©

weights /= np.sum(weights)  # Normalise les poids pour qu'ils totalisent 1 (somme = 100%)

#  M√©thode de Monte Carlo

mc_simulations = 1000   # Nombre de simulations de Monte Carlo

T = 365  # Nombre de jours simul√©s


mean_M = np.full(shape=(T, len(weights)), fill_value=0.0).T  # Matrice de taille (nb_actifs, T) , rendement journalier


portfolio_simulations = np.full(shape=(T, mc_simulations), fill_value=0.0)  # (T jours, mc_sims simulations)  stockage simulations des portefeuilles


initial_portfolio = 1000  #  unit√©s mon√©taires au d√©part 10000


for m in range(mc_simulations):  # On r√©p√®te la simulation mc_simulations fois

    Z = np.random.normal(size=(T, len(weights)))  # Bruit al√©atoire gaussien pour chaque actif et chaque jour


    L = np.linalg.cholesky(cov_matrix)  # L est une matrice triangulaire inf√©rieure cholesky correlations entre actifs

    daily_returns = mean_M + np.inner(L, Z)  # transformation de Cholesky


    portfolio_simulations[:, m] = np.cumprod(np.inner(weights, daily_returns.T) + 1) * initial_portfolio # Calcul des trajectoires du portefeuille sur la p√©riode

plt.plot(portfolio_simulations)
plt.ylabel('Valeur du portefeuille ($)')
plt.xlabel('Jours')
plt.title("Monte-carlo simulation pour un portefeuille d'action")
plt.show()

def mc_VaR(returns,alpha=5):  # niveau de confiance (value at risk)

  if isinstance(returns,pd.Series): # bien une serie pandas
    return np.percentile(returns,alpha) #percentile statistique
  else:
    raise TypeError("Expected a pandas data series. ")

def mc_C_VaR(returns,alpha=5):  #conditionelle

  if isinstance(returns,pd.Series): # verification des donn√©es
    below_VaR = returns <= mc_VaR(returns,alpha=alpha) # perte extreme
    return returns[below_VaR].mean() # moyenne perte extreme
  else:
    raise TypeError("Expected a pandas data series. ")

valeurs_Portefeuille = pd.Series(portfolio_simulations[-1,:]) # valeurs du portefeuille simul√©

VaR = initial_portfolio - mc_VaR(valeurs_Portefeuille,alpha=5) #perte maximale √† un niveau de risque donn√©
C_VaR = initial_portfolio - mc_C_VaR(valeurs_Portefeuille,alpha=5) # perte moyenne dans les sc√©narios les plus extr√™mes

print('VaR: ${}'.format(round(VaR, 2)))
print('C_VaR: ${}'.format(round(C_VaR, 2)))

# Trac√© des simulations de Monte Carlo
plt.plot(portfolio_simulations, alpha=0.6)  # Courbes des simulations
plt.ylabel('Valeur du portefeuille ($)')
plt.xlabel('Jours')
plt.title("Monte-Carlo simulation pour un portefeuille d'actions")

# Lignes de seuils pour la Value at risk (VaR) et la C_Variance (CVaR)
plt.axhline(y=initial_portfolio - VaR, color='blue', linestyle='--', label=f'VaR: ${round(VaR, 2)}')
plt.axhline(y=initial_portfolio - C_VaR, color='red', linestyle='--', label=f'CVaR: ${round(C_VaR, 2)}')

# Ajout annotations pour la VaR et C_VaR
plt.text(0.05, 0.85, f'VaR: ${round(VaR, 2)}', transform=plt.gca().transAxes, fontsize=10, color='blue')
plt.text(0.05, 0.80, f'CVaR: ${round(C_VaR, 2)}', transform=plt.gca().transAxes, fontsize=10, color='red')

# l√©gende
plt.legend(loc='lower left')

#le graphique
plt.show()

# Interpr√©tation des r√©sultats
print(f"Interpr√©tation des r√©sultats :\n")
print(f"1. VaR(Value at Risk) :")
print(f"   - La VaR (√† 5%) est de ${VaR:.2f}. Cela signifie qu'il y a une probabilit√© de 5% "
      f"que le portefeuille perde au moins ${VaR:.2f} et descende sous ${initial_portfolio - VaR:.2f}.")

print(f"\n2. C_VaR (Conditional Value at Risk) :")
print(f"   - La C_VaR (√† 5%) est de ${C_VaR:.2f}. Cela signifie que dans les 5% des pires sc√©narios, "
      f"la perte moyenne sera de ${C_VaR:.2f}, et le portefeuille descendra en moyenne sous ${initial_portfolio - C_VaR:.2f}.")

"""INTERPRETATION

value at risk:

Quelle est la perte maximale que je pourrais subir avec une probabilit√© de
ùõº% ?

mesure de seuil : elle te dit qu'il y a une probabilit√© de
ùõº% que ton portefeuille perde au moins cette valeur (en g√©n√©ral n√©gative) dans une p√©riode donn√©e.

Par exemple :
Si Variance = 7,000 et initial_portfolio = 100,000, cela signifie que :
"Il y a 5% de probabilit√© que le portefeuille perde au moins $7,000,

conditional value at risk:

Quelle est la perte moyenne dans les pires
ùõº
% des sc√©narios ?

mesure l‚Äôampleur moyenne des pertes dans les pires cas.

Si C_Variance = 8,000, cela signifie que dans les 5% des pires sc√©narios :
La perte moyenne sera de $8,000,

Elle peut √™tre difficile √† interpr√©ter pour les investisseurs non techniques, car elle refl√®te des pertes "moyennes" plut√¥t qu'un seuil absolu.
"""